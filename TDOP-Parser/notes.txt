
Implementing a Top Down Recursive Decent Parser AKA Pratt Parsing

TASKS:
	- Seperate Class for Precedence (More readable)
	- Add brackets
	- Add unary operators 
	- Create test cases
	- Research good practices

NOTES:    

	- Will have to read from a file of mock token list later on
	- Tokens -> Specific Class Object that implements interface 'Expression' - used for pretty printing
	- Multiple subclasses implement the Expression interface. Eg ConditionalExpression
	- =0 after a virtual function override is an error! Only use =0 for the abstract class

	Precedence:
	PREC_TERM,        -> 1 + -
	PREC_FACTOR,      -> 2 * /
	PREC_UNARY,       -> 3 ! - (Implement later)  


	account for different integers on differnet systems? (Later)  



